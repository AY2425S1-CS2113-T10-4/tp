@startuml

actor User
participant SpendSwift
participant Parser
participant BudgetManager
participant Category
participant Expense
participant Budget
participant TrackerData

User -> SpendSwift : input("view-budget")
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> BudgetManager : viewBudget(trackerData)
activate BudgetManager

alt No Budgets Set
    BudgetManager -> User : Print "No budgets set for any category."
else Budgets Exist
    BudgetManager -> TrackerData : getExpenses()
    TrackerData --> BudgetManager : Return list of expenses

    BudgetManager -> BudgetManager : Initialize totalExpensesToCategory map

    loop Calculate Total Expenses Per Category
        BudgetManager -> Expense : Get category and amount for each expense
        activate Expense
        Expense --> BudgetManager : Return category and amount
        deactivate Expense

        BudgetManager -> BudgetManager : Update total expense in totalExpensesToCategory map
    end

    loop Calculate Remaining Budget for Each Category
        BudgetManager -> Budget : Get budget for each category with a set budget
        activate Budget
        Budget --> BudgetManager : Return budget limit
        deactivate Budget

        BudgetManager -> BudgetManager : Calculate remaining budget (limit - totalExpense)

        alt Remaining Budget >= 0
            BudgetManager -> User : Print "<Category>: <totalExpense> spent, <remainingBudget> remaining"
        else Over Budget
            BudgetManager -> User : Print "<Category>: <totalExpense> spent, Over budget by <overBudgetAmount>"
        end
    end

    loop Check Categories Without Budgets
        BudgetManager -> Category : Check if each category in totalExpensesToCategory has a budget
        activate Category
        Category --> BudgetManager : Return category name if no budget set
        deactivate Category

        BudgetManager -> User : Print "<Category>: No budget set"
    end
end
deactivate BudgetManager
deactivate Parser

@enduml
