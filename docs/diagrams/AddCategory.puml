@startuml

actor User
participant SpendSwift
participant Parser
participant CategoryManager
participant InputParser
participant ErrorMessage
participant TrackerData
participant Format
participant SuccessMessage
participant Category

User -> SpendSwift : input("add-category c/<categoryName>")
activate SpendSwift
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> CategoryManager : addCategory(input, trackerData)

activate CategoryManager
CategoryManager -> InputParser : parseCategory(input)

activate InputParser
InputParser -> InputParser : parseComponent(input, "c/")

    activate InputParser
    InputParser --> InputParser : return categoryName: String
    deactivate InputParser

InputParser --> CategoryManager : return categoryName: String
deactivate InputParser

alt categoryName == null || categoryName.isEmpty()
    CategoryManager -> ErrorMessage : printMissingCategory()
    activate ErrorMessage
    ErrorMessage --> CategoryManager : "Category name is empty!"
    deactivate ErrorMessage

else !(categoryName == null) && !(categoryName.isEmpty())
    CategoryManager -> CategoryManager : addCategoryHelper(trackerData, categoryName)
    activate CategoryManager
    CategoryManager -> TrackerData : getCategories()
    activate TrackerData
    TrackerData --> CategoryManager : return categories: List<Category>
    deactivate TrackerData

    CategoryManager -> Format : formatInput(categoryName)
    activate Format
    Format --> CategoryManager : return formattedCategoryName: String
    deactivate Format

    loop for each Category in categories
        CategoryManager -> Category : getName()
        activate Category
        Category --> CategoryManager : return name: String
        deactivate Category

        opt name == formattedCategoryName
            CategoryManager -> SuccessMessage : printExistingCategory(formattedCategoryName)
            activate SuccessMessage
            SuccessMessage --> CategoryManager : "Category '<formattedCategoryName>' already exists!"
            deactivate SuccessMessage
        end
    end

    opt !(name == formattedCategoryName)
        CategoryManager -> Category : new Category(formattedCategoryName)
        activate Category
        Category --> CategoryManager : return new Category instance
        deactivate Category

        CategoryManager -> TrackerData : setCategories(categories)
        activate TrackerData
        TrackerData --> CategoryManager : return
        deactivate TrackerData
        CategoryManager -> SuccessMessage : printAddCategory(newCategory)
        activate SuccessMessage
        SuccessMessage --> CategoryManager : "Category '<newCategory>' added successfully."
        deactivate SuccessMessage
    end
    CategoryManager --> CategoryManager : return
    deactivate CategoryManager
end

CategoryManager --> Parser : return
deactivate CategoryManager
Parser --> SpendSwift : return
deactivate Parser
SpendSwift --> User : return
deactivate SpendSwift
@enduml
