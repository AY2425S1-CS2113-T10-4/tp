@startuml

actor User
participant SpendSwift
participant Parser
participant CategoryManager
participant Category
participant TrackerData
participant SuccessMessage
participant ErrorMessage

User -> SpendSwift : input("add-category <categoryName>")
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> CategoryManager : addCategory(input, trackerData)

activate CategoryManager
CategoryManager -> CategoryManager : parseCategory(input)
CategoryManager -> CategoryManager : trim and format input

alt categoryName is empty
    CategoryManager -> ErrorMessage : printExpensesManagerEmptyCategory()
else categoryName is not empty
    CategoryManager -> CategoryManager : addCategoryHelper(trackerData, categoryName)
    activate CategoryManager

    CategoryManager -> TrackerData : getCategories()
    TrackerData --> CategoryManager : return categories list
    CategoryManager -> CategoryManager : check if categoryName exists in categories

    alt category already exists
        CategoryManager -> SuccessMessage : printExistingCategory(formattedCategoryName)
    else category does not exist
        CategoryManager -> Category : new Category(formattedCategoryName)
        activate Category
        Category --> CategoryManager : return new Category instance
        deactivate Category

        CategoryManager -> TrackerData : add new Category to categories
        CategoryManager -> SuccessMessage : printAddCategory(newCategory)
    end
    deactivate CategoryManager
end

deactivate CategoryManager
deactivate Parser

@enduml
