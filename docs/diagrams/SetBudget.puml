@startuml

actor User
participant Duke
participant ExpenseTracker
participant Category
participant Budget

User -> Duke : input("set-budget c/<category> l/<limit>")
activate Duke

Duke -> ExpenseTracker : setBudgetLimitRequest(input)
activate ExpenseTracker

ExpenseTracker -> ExpenseTracker : Parse category and limit from input

alt Invalid Input (Missing Category or Limit)
    ExpenseTracker -> User : Display "Invalid input! Please provide name and amount."
else Valid Input
    ExpenseTracker -> ExpenseTracker : formatInput(categoryName)

    loop Search for Category
        ExpenseTracker -> Category : Check if category matches formattedCategoryName
        activate Category
        Category --> ExpenseTracker : Return matching category name
        deactivate Category
    end

    alt Category Not Found
        ExpenseTracker -> User : Display "Category '<formattedCategoryName>' not found. Please add the category first."
    else Category Found
        ExpenseTracker -> ExpenseTracker : Check if budget already exists for the category

        alt Budget Exists
            ExpenseTracker -> Budget : Update existing budget limit
            activate Budget
            Budget --> ExpenseTracker : Return updated budget details
            deactivate Budget
            ExpenseTracker -> User : Display "Updated budget for category '<category>' to <limit>"
        else No Existing Budget
            ExpenseTracker -> Budget : Create new Budget instance with limit
            activate Budget
            Budget --> ExpenseTracker : Return new budget details
            deactivate Budget
            ExpenseTracker -> User : Display "Set budget for category '<category>' to <limit>"
        end
    end
end
deactivate ExpenseTracker
deactivate Duke

@enduml
