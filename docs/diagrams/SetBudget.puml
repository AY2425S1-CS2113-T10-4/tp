@startuml

participant BudgetManager
participant TrackerData
participant Category
participant Budget

BudgetManager -> BudgetManager : setBudgetLimit(TrackerData trackerData, String categoryName, double limit)

BudgetManager -> TrackerData : getCategories()
TrackerData --> BudgetManager : Return list of categories

BudgetManager -> TrackerData : getBudgets()
TrackerData --> BudgetManager : Return map of budgets

BudgetManager -> BudgetManager : Format category name (trim and standardize input)

alt Limit Exceeds Maximum Value
    BudgetManager -> User : Display "Budget limit exceeds maximum allowable value."
else Valid Limit
    loop Search for Category
        BudgetManager -> Category : Check if category matches formattedCategoryName
        activate Category
        Category --> BudgetManager : Return matching category or null
        deactivate Category
    end

    alt Category Not Found
        BudgetManager -> User : Display "Category '<formattedCategoryName>' not found."
    else Category Found
        alt Budget Exists for Category
            BudgetManager -> Budget : Update existing budget with new limit
            activate Budget
            Budget --> BudgetManager : Confirm updated budget
            deactivate Budget
            BudgetManager -> User : Display "Updated budget for category '<category>' to <limit>."
        else No Existing Budget
            BudgetManager -> Budget : Create new budget instance with limit
            activate Budget
            Budget --> BudgetManager : Return new budget instance
            deactivate Budget
            BudgetManager -> TrackerData : Add new budget to budgets map
            BudgetManager -> User : Display "Set budget for category '<category>' to <limit>."
        end
    end
end

@enduml


