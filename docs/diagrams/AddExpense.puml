@startuml
actor User
participant SpendSwift
participant Parser
participant ExpenseManager
participant TrackerData
participant Category
participant Expense

User -> SpendSwift : input("add-expense n/<name> a/<amount> c/<category>")
activate SpendSwift
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> ExpenseManager : addExpenseRequest(input, expenseManager, trackerData)

activate ExpenseManager
ExpenseManager -> ExpenseManager : Parse name, amount, category from input

alt Invalid Input
    ExpenseManager -> Parser : Print error message (e.g., "Invalid input!")
else Valid Input
    ExpenseManager -> ExpenseManager : Call addExpense(trackerData, name, amount, category)
    activate ExpenseManager

    ExpenseManager -> TrackerData : getCategories()
    TrackerData --> ExpenseManager : Return list of categories

    ExpenseManager -> ExpenseManager : Format category name (trim and standardize input)
    ExpenseManager -> ExpenseManager : Check if category exists in categories

    alt Category exists
        ExpenseManager -> Category : Retrieve existing category
        activate Category
        Category --> ExpenseManager : Return category
        deactivate Category
    else Category does not exist
        ExpenseManager -> Category : Create new Category
        activate Category
        Category --> ExpenseManager : Return new category
        deactivate Category
        ExpenseManager -> TrackerData : Add new category to categories
    end

    ExpenseManager -> Expense : Create Expense(name, amount, existingCategory)
    activate Expense
    Expense --> ExpenseManager : Return expense
    deactivate Expense

    ExpenseManager -> TrackerData : Add Expense to expenses
    ExpenseManager -> Parser : Print confirmation of added expense
    deactivate ExpenseManager
end
deactivate Parser
SpendSwift --> User : return
deactivate SpendSwift
@enduml
