@startuml
actor User
participant SpendSwift
participant Parser
participant ExpenseManager
participant TrackerData
participant SuccessMessage
participant Category

User -> SpendSwift : input("view-expenses")
SpendSwift -> Parser : parseCommand(input, trackerData)

activate Parser
Parser -> ExpenseManager : viewExpensesByCategory(trackerData)

activate ExpenseManager
ExpenseManager -> TrackerData : getExpenses()
TrackerData --> ExpenseManager : Return list of expenses

ExpenseManager -> TrackerData : getCategories()
TrackerData --> ExpenseManager : Return list of categories

alt No Expenses or Categories
    ExpenseManager -> SuccessMessage : printNoExpense()
else Expenses exist
    ExpenseManager -> SuccessMessage : printExpensesByCategory(expenses, categories)

    activate SuccessMessage
    SuccessMessage -> SuccessMessage : Group expenses by category
    SuccessMessage -> SuccessMessage : Iterate through categories
    alt Category has expenses
        SuccessMessage -> SuccessMessage : Print expenses for category
    else Category has no expenses
        SuccessMessage -> SuccessMessage : Print "No expense" for category
    end
    deactivate SuccessMessage
end
deactivate ExpenseManager
deactivate Parser

@enduml
